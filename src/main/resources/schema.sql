DROP TABLE if exists PUBLIC.LIKES;
DROP TABLE if exists PUBLIC.FILM_GENRE;
DROP TABLE if exists PUBLIC.FILM;
DROP TABLE if exists PUBLIC.MPA;
DROP TABLE if exists PUBLIC.GENRE;
DROP TABLE if exists PUBLIC.FRIENDS;
DROP TABLE if exists PUBLIC.USERS;

CREATE TABLE IF NOT EXISTS PUBLIC.users (
    id INTEGER AUTO_INCREMENT,
    login CHARACTER VARYING(100) NOT NULL,
    username CHARACTER VARYING(100) NOT NULL,
    email CHARACTER VARYING(100) NOT NULL,
    birthday DATE,
    CONSTRAINT USER_PK PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS PUBLIC.friends (
    id INTEGER AUTO_INCREMENT,
    user_id INTEGER NOT NULL,
    friend_id INTEGER NOT NULL,
    CONSTRAINT FRIENDS_PK PRIMARY KEY (id),
    CONSTRAINT FRIENDS_FK FOREIGN KEY (user_id) REFERENCES PUBLIC.users(id),
    CONSTRAINT FRIENDS_FK_1 FOREIGN KEY (friend_id) REFERENCES PUBLIC.users(id)
);

CREATE TABLE IF NOT EXISTS PUBLIC.genre (
    id INTEGER AUTO_INCREMENT,
    genrename CHARACTER VARYING(20) NOT NULL,
    CONSTRAINT genre_pk PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS PUBLIC.mpa (
    id INTEGER AUTO_INCREMENT,
    mpaname CHARACTER VARYING(10) NOT NULL,
    CONSTRAINT mpa_pk PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS PUBLIC.film (
    id INTEGER AUTO_INCREMENT,
    filmname CHARACTER VARYING(100) NOT NULL,
    description CHARACTER VARYING(200),
    release_date DATE,
    duration INTEGER NOT NULL,
    mpa_id INTEGER NOT NULL,
    CONSTRAINT FILM_PK PRIMARY KEY (id),
    CONSTRAINT FILM_FK FOREIGN KEY (mpa_id) REFERENCES PUBLIC.mpa(id)
);

CREATE TABLE IF NOT EXISTS PUBLIC.likes (
    id INTEGER AUTO_INCREMENT,
    film_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    CONSTRAINT LIKES_PK PRIMARY KEY (id),
    CONSTRAINT user_id_fk FOREIGN KEY (user_id) REFERENCES PUBLIC.users(id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT film_id_fk FOREIGN KEY (film_id) REFERENCES PUBLIC.film(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS PUBLIC.film_genre (
    id INTEGER AUTO_INCREMENT,
    film_id INTEGER NOT NULL,
    genre_id INTEGER NOT NULL,
    CONSTRAINT FILM_GENRE_PK PRIMARY KEY (id),
    CONSTRAINT film_genre_fk FOREIGN KEY (film_id) REFERENCES PUBLIC.film(id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT genre_id_fk FOREIGN KEY (genre_id) REFERENCES PUBLIC.genre(id) ON DELETE CASCADE ON UPDATE CASCADE
    );

